{"version":3,"sources":["03-periodicity/src/shader.ts","03-periodicity/src/program.ts","03-periodicity/src/shader.vert","03-periodicity/src/shader.frag","../lib/core/math.ts","../lib/core/wave.ts","03-periodicity/src/main.ts"],"names":["module","exports"],"mappings":"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","file":"main.73dbf9cd.js","sourceRoot":"../src/lab","sourcesContent":["export function validate(gl: WebGLRenderingContext, shader: WebGLShader): void {\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!success) {\n    gl.deleteShader(shader);\n\n    throw new Error(\n      `shader ${shader} failed to compile:\\n${gl.getShaderInfoLog(shader)}`,\n    );\n  }\n}\n\nexport function compile(\n  gl: WebGLRenderingContext,\n  type:\n    | WebGLRenderingContext['VERTEX_SHADER']\n    | WebGLRenderingContext['FRAGMENT_SHADER'],\n  source: string,\n): WebGLShader {\n  const shader = gl.createShader(type) as WebGLShader;\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (process.env.NODE_ENV === 'development') {\n    validate(gl, shader);\n  }\n\n  return shader;\n}\n","export function validate(\n  gl: WebGLRenderingContext,\n  program: WebGLProgram,\n): void {\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!success) {\n    gl.deleteProgram(program);\n\n    throw new Error(\n      `program (${program}) failed to link:\\n${gl.getProgramInfoLog(program)}`,\n    );\n  }\n}\n\nexport function link(\n  gl: WebGLRenderingContext,\n  vert: WebGLShader,\n  frag: WebGLShader,\n): WebGLProgram {\n  const program = gl.createProgram() as WebGLProgram;\n\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n\n  if (process.env.NODE_ENV === 'development') {\n    validate(gl, program);\n  }\n\n  return program;\n}\n","module.exports=\"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nattribute vec2 aPositions;\\n\\nuniform vec2 uTranslation;\\nuniform vec2 uResolution;\\n\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec2 position = ((aPositions + uTranslation) / uResolution) * 2.0 - 1.0;\\n  gl_Position = vec4(position, 0.0, 1.0);\\n  vColor = gl_Position * 0.5 + 0.5;\\n}\\n\";","module.exports=\"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nvarying vec4 vColor;\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(vColor.xy, 1.0 - vColor.y, 1.0);\\n}\\n\";","export const {\n  abs,\n  acos,\n  atan2,\n  ceil,\n  cos,\n  floor,\n  hypot,\n  max,\n  min,\n  PI: π,\n  pow,\n  round,\n  sin,\n  sqrt,\n} = Math;\nexport const ππ = π * 2;\nexport const { isFinite } = Number;\n\n/**\n * ## lerp\n * short for \"linear interpolate\" this function returns a number that is\n * interpolated between `a` and `b` by the ratio provided in `i` (e.g. if `i` is\n * 0 `a` is returned, if `i` is 1 `b` is returned)\n *\n * @export\n * @param {number} v0 the lower bound of the interpolation\n * @param {number} v1 the upper bound of the interpolation\n * @param {number} t the ratio by which to interpolate between `a` and `b`\n * @returns {number} a number that is interpolated between `a` and `b` by the\n * ratio provided in `i`\n */\nexport function lerp(v0: number, v1: number, t: number): number {\n  /**\n   * prefer precise method\n   * @see: https://github.com/mattdesl/lerp/blob/master/index.js\n   * @see: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\n   */\n  return (1 - t) * v0 + t * v1;\n}\n\n/**\n * ## saw\n * this is a trigonometric function (like Math.sin, or Math.cos), it takes an\n * angle in radians and returns a value between -1 and 1, the \"shape\" of the\n * returned values follows a linear \"sawtooth\" pattern\n *\n * @export\n * @param {number} radians a value in radians (clamped between 0 and ππ)\n * @returns {number} a value between -1 and 1 for entry values between 0 and ππ\n */\nexport function saw(radians: number): number {\n  return (radians % ππ) / π - 1;\n}\n\n/**\n * ## tri\n * this is a trigonometric function (like Math.sin, or Math.cos), it takes an\n * angle in radians and returns a value between -1 and 1, the \"shape\" of the\n * returned values follows a linear \"triangle wave\" pattern\n *\n * @export\n * @param {number} radians a value in radians (clamped between 0 and ππ)\n * @returns {number} a value between -1 and 1 for entry values between 0 and ππ\n */\nexport function tri(radians: number): number {\n  return 1 - 2 * abs(saw(radians));\n}\n\n/**\n * ## toDegrees\n * takes an angle in radians and returns that angle in degrees\n *\n * @param {number} radians an angle, in radians\n * @return {number} that same angle, in degrees\n */\nexport function toDegrees(radians: number): number {\n  return (radians * 180) / π;\n}\n\n/**\n * ## toRadians\n * takes an angle in degrees and returns that angle in radians\n *\n * @param {number} degrees an angle, in degrees\n * @return {number} that same angle, in radians\n */\nexport function toRadians(degrees: number): number {\n  return (degrees * π) / 180;\n}\n","import { cos, saw, sin, tri, ππ } from './math';\n\nexport type TrigFunction = (radians: number) => number;\nexport type WaveFunction = (timestamp: number) => number;\n\n/**\n * ## wave\n * this utility function uses the provided trigonometric function to create a\n * wave function that takes a timestamp in milliseconds (optionally offset by\n * `o`) and that returns a value between `min` and `max` for the period `p`\n *\n * @export\n * @param {TrigFunction} fn the function to generate the wave (takes a value in\n * radians and returns a value between -1 and 1 at some interval)\n * @param {number} [p=1000] the period for this wave (in milliseconds)\n * @param {*} [min=-1] the minimum value for the generated wave\n * @param {number} [max=1] the maximum value for the generated wave\n * @param {number} [o=0] an optional offset (in milliseconds) at which to start\n * the wave\n * @returns {WaveFunction} a wave function that takes a timestamp in\n * milliseconds (optionally offset by `o`) and returns a value between `min` and\n * `max` for the period `p`\n */\nexport function wave(\n  fn: TrigFunction,\n  p = 1000,\n  min = -1,\n  max = 1,\n  o = 0,\n): WaveFunction {\n  /**\n   * peak amplitude (not peak-to-peak amplitude)\n   * @see https://en.wikipedia.org/wiki/Amplitude\n   */\n  const amp = (max - min) / 2;\n\n  /**\n   * radians per period (angular frequency)\n   * @see https://en.wikipedia.org/wiki/Angular_frequency\n   */\n  const rpp = ππ / p;\n\n  return (t: number) => {\n    const ots = o + t; // offset timestamp\n    return amp * (1 + fn(ots * rpp)) + min;\n  };\n}\n\ntype CurriedWaveFunction = (\n  p?: number,\n  min?: number,\n  max?: number,\n  o?: number,\n) => WaveFunction;\n\nexport const [cosWave, sawWave, sinWave, triWave]: CurriedWaveFunction[] = [\n  (p = 1000, min = -1, max = 1, o = 0) => wave(cos, p, min, max, o),\n  (p = 1000, min = -1, max = 1, o = 0) => wave(saw, p, min, max, o),\n  (p = 1000, min = -1, max = 1, o = 0) => wave(sin, p, min, max, o),\n  (p = 1000, min = -1, max = 1, o = 0) => wave(tri, p, min, max, o),\n];\n","import './main.css';\n\nimport { compile } from './shader';\nimport { link } from './program';\n\nimport vert from './shader.vert';\nimport frag from './shader.frag';\nimport { cosWave, sinWave, WaveFunction } from '../../../lib/core/wave';\n\n// const { keys, getPrototypeOf } = Object;\nconst { isInteger } = Number;\n\nconst el = (s: string) => document.querySelector(s);\nconst on = (e: string, fn: EventListener) => window.addEventListener(e, fn);\n\nconst m = el('main') as HTMLMainElement;\nconst c = el('canvas') as HTMLCanvasElement;\nconst gl = c.getContext('webgl', {\n  antialias: false,\n}) as WebGLRenderingContext;\n\nlet shouldResize = true;\n\nlet program: WebGLProgram;\n\nlet aPositions: number;\nlet positions: WebGLBuffer;\n\nlet uTranslation: WebGLUniformLocation;\nlet translation = [0, 0];\n\nlet uResolution: WebGLUniformLocation;\nlet resolution = [0, 0];\n\nconst configs = [\n  {\n    radius: 50,\n    period: 10000,\n    count: 24,\n  },\n  {\n    radius: 35,\n    period: 5000,\n    count: 12,\n  },\n  {\n    radius: 20,\n    period: 2500,\n    count: 6,\n  },\n  {\n    radius: 5,\n    period: 1250,\n    count: 3,\n  },\n];\nlet points: WaveFunction[];\n\nfunction next(a: number, b: number): number {\n  while (!isInteger(a / b)) {\n    a += 1;\n  }\n\n  return a;\n}\n\nfunction resize() {\n  shouldResize = false;\n\n  let { devicePixelRatio: dpr } = window;\n  let { clientWidth: width, clientHeight: height } = m;\n\n  if (dpr === undefined) {\n    dpr = 1;\n  }\n\n  c.style.width = `${width}px`;\n  c.style.height = `${height}px`;\n\n  const scale = 10;\n  width = next(width, scale);\n  height = next(height, scale);\n\n  const w = (width * dpr) / scale;\n  const h = (height * dpr) / scale;\n\n  const hw = w / 2;\n  const hh = h / 2;\n\n  translation = [hw, hh];\n  resolution = [w, h];\n\n  c.width = w;\n  c.height = h;\n\n  gl.viewport(0, 0, w, h);\n\n  points = configs.reduce(\n    (ps, { radius, period, count }) =>\n      ps.concat(\n        Array(count)\n          .fill(0)\n          .reduce(\n            (p, v, i) =>\n              p.concat([\n                cosWave(period, -radius, radius, (period / count) * i),\n                sinWave(period, -radius, radius, (period / count) * i),\n              ]),\n            [],\n          ),\n      ),\n    [],\n  );\n}\n\non('resize', () => {\n  shouldResize = true;\n});\n\nfunction init(): void {\n  // console.log('init'); // tslint:disable-line no-console\n  if (shouldResize) {\n    resize();\n  }\n\n  gl.clearColor(0, 0, 0, 1);\n\n  program = link(\n    gl,\n    compile(gl, gl.VERTEX_SHADER, vert),\n    compile(gl, gl.FRAGMENT_SHADER, frag),\n  );\n\n  aPositions = gl.getAttribLocation(program, 'aPositions');\n  positions = gl.createBuffer() as WebGLBuffer;\n\n  uTranslation = gl.getUniformLocation(\n    program,\n    'uTranslation',\n  ) as WebGLUniformLocation;\n\n  uResolution = gl.getUniformLocation(\n    program,\n    'uResolution',\n  ) as WebGLUniformLocation;\n}\n\nfunction draw(t: number): void {\n  // console.log('draw', t); // tslint:disable-line no-console\n  requestAnimationFrame(draw);\n\n  if (shouldResize) {\n    resize();\n  }\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.useProgram(program);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, positions);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array(points.map((xy, i) => xy(t))),\n    gl.STATIC_DRAW,\n  );\n\n  gl.enableVertexAttribArray(aPositions);\n  gl.bindBuffer(gl.ARRAY_BUFFER, positions);\n  gl.vertexAttribPointer(aPositions, 2, gl.FLOAT, false, 0, 0);\n\n  gl.uniform2fv(uTranslation, translation);\n  gl.uniform2fv(uResolution, resolution);\n\n  gl.drawArrays(gl.LINE_LOOP, 0, points.length / 2);\n}\n\ninit();\nrequestAnimationFrame(draw);\n"]}