{"version":3,"sources":["../lib/core/math.ts","../lib/core/dom.ts","../lib/game/loop.ts","05-waves/src/resize.ts","05-waves/src/webgl/shader.ts","05-waves/src/webgl/program.ts","05-waves/src/shaders/vert.glsl","05-waves/src/shaders/frag.glsl","../lib/vec/2.ts","../lib/vec/3.ts","../lib/vec/4.ts","../lib/vec/keys.ts","../lib/vec/props.ts","../lib/core/util.ts","../lib/vec/util.ts","../lib/vec/index.ts","../lib/core/wave.ts","05-waves/src/entry.ts"],"names":["module","exports"],"mappings":"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","file":"entry.1b56ba04.js","sourceRoot":"../src/lab","sourcesContent":["export const {\n  abs,\n  acos,\n  atan2,\n  ceil,\n  cos,\n  floor,\n  hypot,\n  max,\n  min,\n  PI: π,\n  pow,\n  round,\n  sin,\n  sqrt,\n} = Math;\nexport const ππ = π * 2;\nexport const { isFinite } = Number;\n\n/**\n * ## lerp\n * short for \"linear interpolate\" this function returns a number that is\n * interpolated between `a` and `b` by the ratio provided in `i` (e.g. if `i` is\n * 0 `a` is returned, if `i` is 1 `b` is returned)\n *\n * @export\n * @param {number} v0 the lower bound of the interpolation\n * @param {number} v1 the upper bound of the interpolation\n * @param {number} t the ratio by which to interpolate between `a` and `b`\n * @returns {number} a number that is interpolated between `a` and `b` by the\n * ratio provided in `i`\n */\nexport function lerp(v0: number, v1: number, t: number): number {\n  /**\n   * prefer precise method\n   * @see: https://github.com/mattdesl/lerp/blob/master/index.js\n   * @see: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\n   */\n  return (1 - t) * v0 + t * v1;\n}\n\n/**\n * ## saw\n * this is a trigonometric function (like Math.sin, or Math.cos), it takes an\n * angle in radians and returns a value between -1 and 1, the \"shape\" of the\n * returned values follows a linear \"sawtooth\" pattern\n *\n * @export\n * @param {number} radians a value in radians (clamped between 0 and ππ)\n * @returns {number} a value between -1 and 1 for entry values between 0 and ππ\n */\nexport function saw(radians: number): number {\n  return (radians % ππ) / π - 1;\n}\n\n/**\n * ## tri\n * this is a trigonometric function (like Math.sin, or Math.cos), it takes an\n * angle in radians and returns a value between -1 and 1, the \"shape\" of the\n * returned values follows a linear \"triangle wave\" pattern\n *\n * @export\n * @param {number} radians a value in radians (clamped between 0 and ππ)\n * @returns {number} a value between -1 and 1 for entry values between 0 and ππ\n */\nexport function tri(radians: number): number {\n  return 1 - 2 * abs(saw(radians));\n}\n\n/**\n * ## toDegrees\n * takes an angle in radians and returns that angle in degrees\n *\n * @param {number} radians an angle, in radians\n * @return {number} that same angle, in degrees\n */\nexport function toDegrees(radians: number): number {\n  return (radians * 180) / π;\n}\n\n/**\n * ## toRadians\n * takes an angle in degrees and returns that angle in radians\n *\n * @param {number} degrees an angle, in degrees\n * @return {number} that same angle, in radians\n */\nexport function toRadians(degrees: number): number {\n  return (degrees * π) / 180;\n}\n","export const {\n  requestAnimationFrame: rAF,\n  cancelAnimationFrame: cAF,\n  devicePixelRatio: dpr,\n} = window;\n\nexport function el<T extends Element>(selectors: string): T {\n  const element = document.querySelector<T>(selectors);\n\n  if (!element) {\n    throw new Error(`Couldn't get \"${selectors}\" element`);\n  }\n\n  return element;\n}\n\ntype Listener<T extends Event> = (event: T) => void;\n\nexport function on<T extends Event>(type: string, listener: Listener<T>): void {\n  return window.addEventListener(type, listener as EventListener);\n}\n\nexport function off<T extends Event>(\n  type: string,\n  listener: Listener<T>,\n): void {\n  return window.removeEventListener(type, listener as EventListener);\n}\n","import { rAF, cAF } from '../core/dom';\nimport { min } from '../core/math';\n\ntype UpdateFunction = (t: number, dt: number) => void;\ntype RenderFunction = (lag: number) => void;\n\nexport const stepTime = 1000 / 60;\n\nlet frameId = -1;\n\nlet firstTime = 0;\nlet previousTime = 0;\n\nlet overTime = 0;\n\nlet currentTime = 0;\nlet deltaTime = 0;\n\nexport default function loop(\n  update: UpdateFunction,\n  render: RenderFunction,\n): { isRunning: boolean; start: () => void; stop: () => void } {\n  function tick(time: DOMHighResTimeStamp) {\n    frameId = rAF(tick);\n\n    currentTime = time - firstTime;\n    deltaTime = currentTime - previousTime;\n\n    previousTime = currentTime;\n    overTime += deltaTime;\n\n    overTime = min(overTime, 1000);\n\n    while (overTime >= stepTime) {\n      update(currentTime, stepTime);\n      overTime -= stepTime;\n    }\n\n    render(overTime / stepTime);\n  }\n\n  return {\n    get isRunning() {\n      return frameId !== -1;\n    },\n\n    start() {\n      if (frameId !== -1) {\n        return;\n      }\n\n      frameId = rAF((time: DOMHighResTimeStamp) => {\n        frameId = rAF(tick);\n\n        render(1);\n\n        firstTime = time;\n        previousTime = 0;\n        overTime = 0;\n      });\n    },\n\n    stop() {\n      if (frameId === -1) {\n        return;\n      }\n\n      cAF(frameId);\n      frameId = -1;\n    },\n  };\n}\n","import { on } from '../../../lib/core/dom';\nimport { max } from '../../../lib/core/math';\n\nfunction next(multipleOf = 1, startingAt = 0) {\n  return startingAt % multipleOf !== 0\n    ? startingAt + (multipleOf - (startingAt % multipleOf))\n    : startingAt;\n}\n\nlet didResizeWindow = true;\non('resize', () => {\n  didResizeWindow = true;\n});\n\nexport function shouldResize() {\n  return didResizeWindow;\n}\n\nexport function resize(\n  canvas: HTMLCanvasElement,\n  container: HTMLElement,\n  scale = 1,\n): void {\n  if (!didResizeWindow) {\n    return;\n  }\n\n  didResizeWindow = false;\n\n  const { devicePixelRatio: dpr } = window;\n  const { clientHeight: h, clientWidth: w } = container;\n\n  const width = next(scale, w);\n  const height = next(scale, h);\n\n  canvas.width = (width * dpr) / scale;\n  canvas.height = (height * dpr) / scale;\n\n  canvas.style.transform = `scale(${max(w / canvas.width, h / canvas.height)})`;\n}\n","export function validate(gl: WebGLRenderingContext, shader: WebGLShader): void {\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!success) {\n    const info = gl.getShaderInfoLog(shader);\n    gl.deleteShader(shader);\n    throw new Error(`shader ${shader} failed to compile:\\n${info}`);\n  }\n}\n\nexport function compile(\n  gl: WebGLRenderingContext,\n  type:\n    | WebGLRenderingContext['VERTEX_SHADER']\n    | WebGLRenderingContext['FRAGMENT_SHADER'],\n  source: string,\n): WebGLShader {\n  const shader = gl.createShader(type) as WebGLShader;\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (process.env.NODE_ENV === 'development') {\n    validate(gl, shader);\n  }\n\n  return shader;\n}\n","export function validate(\n  gl: WebGLRenderingContext,\n  program: WebGLProgram,\n): void {\n  const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n  const valid = gl.getProgramParameter(program, gl.VALIDATE_STATUS);\n\n  if (!(linked && valid)) {\n    const info = gl.getProgramInfoLog(program);\n    const failure = [\n      ...(linked ? ['link'] : []),\n      ...(valid ? ['validate'] : []),\n    ].join(' & ');\n\n    gl.deleteProgram(program);\n    throw new Error(`program (${program}) failed to ${failure}:\\n${info}`);\n  }\n}\n\nexport function link(\n  gl: WebGLRenderingContext,\n  vert: WebGLShader,\n  frag: WebGLShader,\n): WebGLProgram {\n  const program = gl.createProgram() as WebGLProgram;\n\n  gl.attachShader(program, vert);\n  gl.attachShader(program, frag);\n  gl.linkProgram(program);\n\n  if (process.env.NODE_ENV === 'development') {\n    gl.validateProgram(program);\n    validate(gl, program);\n  }\n\n  return program;\n}\n","module.exports=\"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nattribute vec2 aPositions;\\n\\nuniform vec2 uTranslation;\\nuniform vec2 uResolution;\\nuniform float uPointSize;\\n\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  vec2 position = ((aPositions + uTranslation) / uResolution) * 2.0 - 1.0;\\n  gl_PointSize = uPointSize;\\n  gl_Position = vec4(position, 0.0, 1.0);\\n  vColor = gl_Position * 0.5 + 0.5;\\n}\\n\";","module.exports=\"#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nvarying vec4 vColor;\\n\\nfloat PI = 3.14159;\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(1.0 - sin(vColor.y * PI), 0.5, 1.0 - sin(vColor.x * PI), 1.0);\\n}\\n\";","import { Swizzled2 } from './types';\n\ninterface Vec2 extends Float32Array, Swizzled2 {}\nclass Vec2 extends Float32Array {\n  public static dimensions = 2;\n\n  // public static get [Symbol.species]() {\n  //   return Float32Array;\n  // }\n\n  public toString() {\n    return `vec${Vec2.dimensions}(${super.toString()})`;\n  }\n}\n\nexport default Vec2;\n","import { Swizzled3 } from './types';\n\ninterface Vec3 extends Float32Array, Swizzled3 {}\nclass Vec3 extends Float32Array {\n  public static dimensions = 3;\n\n  // public static get [Symbol.species]() {\n  //   return Float32Array;\n  // }\n\n  public toString() {\n    return `vec${Vec3.dimensions}(${super.toString()})`;\n  }\n}\n\nexport default Vec3;\n","import { Swizzled4 } from './types';\n\ninterface Vec4 extends Float32Array, Swizzled4 {}\nclass Vec4 extends Float32Array {\n  public static dimensions = 4;\n\n  // public static get [Symbol.species]() {\n  //   return Float32Array;\n  // }\n\n  public toString() {\n    return `vec${Vec4.dimensions}(${super.toString()})`;\n  }\n}\n\nexport default Vec4;\n","/**\n * ## toKeyIndexPairs\n *\n * @param {[string, number][]} acc\n * @param {string} key\n * @param {number} i\n * @returns {[string, number][]}\n */\nfunction toKeyIndexPairs(\n  acc: [string, number][],\n  key: string,\n  i: number,\n): [string, number][] {\n  return [...acc, [key, i]];\n}\n\n/**\n * ## toKeyIndexMap\n *\n * @export\n * @param {string[][]} baseKeys\n * @returns {Map<string, number>}\n */\nexport function toKeyIndexMap(baseKeys: string[][]) {\n  return new Map(\n    baseKeys.reduce(\n      (acc: [string, number][], keys) => [\n        ...acc,\n        ...keys.reduce(toKeyIndexPairs, []),\n      ],\n      [],\n    ),\n  );\n}\n\n/**\n * ## toSwizzled\n *\n * @param {string[]} keys\n * @param {string} [key='']\n * @param {number} [depth=4]\n * @returns {Iterable<string>}\n */\nfunction* toSwizzled(keys: string[], key = '', depth = 4): Iterable<string> {\n  if (key.length === depth) {\n    return;\n  }\n\n  for (const k of keys) {\n    const nextKey = `${key}${k}`;\n    yield nextKey;\n    yield* toSwizzled(keys, nextKey);\n  }\n}\n\n/**\n * ## toSwizzledSet\n *\n * @export\n * @param {string[][]} baseKeys\n * @returns {Set<string>}\n */\nexport function toSwizzledSet(baseKeys: string[][]) {\n  return new Set(\n    baseKeys.reduce(\n      (acc: string[], keys) => [...acc, ...Array.from(toSwizzled(keys))],\n      [],\n    ),\n  );\n}\n","import Vec2 from './2';\nimport Vec3 from './3';\nimport Vec4 from './4';\n\nimport { isFinite } from '../core/math';\nimport { toSwizzledSet, toKeyIndexMap } from './keys';\n\nconst Vec = [Vec2, Vec3, Vec4];\n\nfunction getByKey<V extends Float32Array>(\n  target: V,\n  key: string,\n  map: Map<string, number>,\n): number {\n  const i = map.get(key) as number;\n  return target[i];\n}\n\nfunction getterFor<V extends Float32Array>(\n  key: string,\n  map: Map<string, number>,\n):\n  | ((this: V) => number)\n  | ((this: V) => Vec2)\n  | ((this: V) => Vec3)\n  | ((this: V) => Vec4) {\n  const { length } = key;\n\n  return length === 1\n    ? function get(this: V) {\n        return getByKey<V>(this, key, map);\n      }\n    : function get(this: V) {\n        const args = key.split('').map(k => getByKey<V>(this, k, map));\n        return new Vec[length - 2](args);\n      };\n}\n\nfunction setByKey<V extends Float32Array>(\n  target: V,\n  key: string,\n  map: Map<string, number>,\n  value: number,\n): void {\n  if (!isFinite(value)) {\n    throw new Error(\n      `Cannot assign ${typeof value} value \"${value}\" to a component of ${\n        target.constructor.name\n      }`,\n    );\n  }\n\n  const i = map.get(key) as number;\n  target[i] = value;\n}\n\nfunction setterFor<V extends Float32Array>(\n  key: string,\n  map: Map<string, number>,\n):\n  | ((this: V, value: number) => void)\n  | ((this: V, value: ArrayLike<number>) => void) {\n  const { length } = key;\n\n  return length === 1\n    ? function set(this: V, value: number) {\n        setByKey<V>(this, key, map, value);\n      }\n    : function set(this: V, value: ArrayLike<number>) {\n        if (length !== value.length) {\n          throw new Error(\n            [\n              'Dimension mismatch',\n              `Cannot assign ${value.length}-component value: ${value} to ${length}-component key ${key}`,\n            ].join('\\n'),\n          );\n        }\n\n        key.split('').forEach((k, i) => setByKey<V>(this, k, map, value[i]));\n      };\n}\n\nexport function createProps<V extends Float32Array>(baseKeys: string[][]) {\n  const swizzledSet = toSwizzledSet(baseKeys);\n  const keyIndexMap = toKeyIndexMap(baseKeys);\n\n  return Array.from(swizzledSet).reduce((acc: PropertyDescriptorMap, key) => {\n    acc[key] = {\n      configurable: false,\n      enumerable: true,\n      get: getterFor<V>(key, keyIndexMap),\n      set: setterFor<V>(key, keyIndexMap),\n    };\n\n    return acc;\n  }, {});\n}\n","export const { isArray } = Array;\nexport const { isInteger } = Number;\n\nexport const { slice } = [];\n","import { slice } from '../core/util';\n\n/**\n * ## toArray\n *\n * @export\n * @param {number[]} acc\n * @param {(number | number[] | Float32Array)} arg\n * @returns {number[]}\n */\nexport function toArray(\n  acc: number[],\n  arg: number | number[] | Float32Array,\n): number[] {\n  return acc.concat(arg instanceof Float32Array ? slice.call(arg) : arg);\n}\n","import Vec2 from './2';\nimport Vec3 from './3';\nimport Vec4 from './4';\n\nimport { createProps } from './props';\nimport { toArray } from './util';\nimport { isFinite } from '../core/math';\n\nObject.defineProperties(\n  Vec2.prototype,\n  // prettier-ignore\n  createProps<Vec2>([\n    ['r', 'g'],\n    ['s', 't'],\n    ['x', 'y'],\n  ]),\n);\n\nObject.defineProperties(\n  Vec3.prototype,\n  // prettier-ignore\n  createProps<Vec3>([\n    ['r', 'g', 'b'],\n    ['s', 't', 'p'],\n    ['x', 'y', 'z'],\n  ]),\n);\n\nObject.defineProperties(\n  Vec4.prototype,\n  // prettier-ignore\n  createProps<Vec4>([\n    ['r', 'g', 'b', 'a'],\n    ['s', 't', 'p', 'q'],\n    ['x', 'y', 'z', 'w'],\n  ]),\n);\n\ntype AnyVec = Vec2 | Vec3 | Vec4;\ntype AnyVecType = typeof Vec2 | typeof Vec3 | typeof Vec4;\n\ntype Components = (number | number[] | Float32Array)[];\ntype Factory<V extends AnyVec> = (...args: Components) => V;\n\nfunction createFactory<V extends AnyVec>(\n  Vec: AnyVecType,\n  size: number,\n): Factory<V> {\n  return (...args: Components): V => {\n    const flat = args.reduce(toArray, []);\n\n    if (flat.length > 1 && flat.length !== size) {\n      throw new Error(\n        `${\n          flat.length < size ? 'Not enough' : 'Too many'\n        } arguments provided for construction of ${Vec.name.toLowerCase()}`,\n      );\n    }\n\n    if (\n      flat.length === 1 &&\n      !(typeof flat[0] === 'number' && isFinite(flat[0]))\n    ) {\n      throw new Error(\n        `Invalid arguments \"${flat}\" provided to  ${Vec.name.toLowerCase()}`,\n      );\n    }\n\n    const components =\n      flat.length <= 1 ? new Array(size).fill(flat[0] || 0) : flat;\n\n    return new Vec(components) as V;\n  };\n}\n\nexport const [vec2, vec3, vec4] = [\n  createFactory<Vec2>(Vec2, 2),\n  createFactory<Vec3>(Vec3, 3),\n  createFactory<Vec4>(Vec4, 4),\n];\n","import { cos, saw, sin, tri, ππ } from './math';\n\nexport type TrigFunction = (radians: number) => number;\nexport type WaveFunction = (timestamp: number) => number;\n\n/**\n * ## wave\n * this utility function uses the provided trigonometric function to create a\n * wave function that takes a timestamp in milliseconds (optionally offset by\n * `o`) and that returns a value between `min` and `max` for the period `p`\n *\n * @export\n * @param {TrigFunction} fn the function to generate the wave (takes a value in\n * radians and returns a value between -1 and 1 at some interval)\n * @param {number} [p=1000] the period for this wave (in milliseconds)\n * @param {*} [min=-1] the minimum value for the generated wave\n * @param {number} [max=1] the maximum value for the generated wave\n * @param {number} [o=0] an optional offset (in milliseconds) at which to start\n * the wave\n * @returns {WaveFunction} a wave function that takes a timestamp in\n * milliseconds (optionally offset by `o`) and returns a value between `min` and\n * `max` for the period `p`\n */\nexport function wave(\n  fn: TrigFunction,\n  p = 1000,\n  min = -1,\n  max = 1,\n  o = 0,\n): WaveFunction {\n  /**\n   * peak amplitude (not peak-to-peak amplitude)\n   * @see https://en.wikipedia.org/wiki/Amplitude\n   */\n  const amp = (max - min) / 2;\n\n  /**\n   * radians per period (angular frequency)\n   * @see https://en.wikipedia.org/wiki/Angular_frequency\n   */\n  const rpp = ππ / p;\n\n  return (t: number) => {\n    const ots = o + t; // offset timestamp\n    return amp * (1 + fn(ots * rpp)) + min;\n  };\n}\n\ntype CurriedWaveFunction = (\n  p?: number,\n  min?: number,\n  max?: number,\n  o?: number,\n) => WaveFunction;\n\nexport const [cosWave, sawWave, sinWave, triWave]: CurriedWaveFunction[] = [\n  (p = 1000, min = -1, max = 1, o = 0) => wave(cos, p, min, max, o),\n  (p = 1000, min = -1, max = 1, o = 0) => wave(saw, p, min, max, o),\n  (p = 1000, min = -1, max = 1, o = 0) => wave(sin, p, min, max, o),\n  (p = 1000, min = -1, max = 1, o = 0) => wave(tri, p, min, max, o),\n];\n","import { round } from '../../../lib/core/math';\nimport { el } from '../../../lib/core/dom';\nimport loop from '../../../lib/game/loop';\nimport { resize, shouldResize } from './resize';\n\nimport './style.css';\n\nimport { compile } from './webgl/shader';\nimport { link } from './webgl/program';\n\nimport vert from './shaders/vert.glsl';\nimport frag from './shaders/frag.glsl';\n\nimport Vec2 from '../../../lib/vec/2';\nimport { vec2 } from '../../../lib/vec';\nimport {\n  cosWave,\n  sawWave,\n  sinWave,\n  triWave,\n  WaveFunction,\n} from '../../../lib/core/wave';\n\nconst m = el('main') as HTMLElement;\nconst c = el('canvas') as HTMLCanvasElement;\nconst gl = c.getContext('webgl', {\n  antialias: false,\n}) as WebGLRenderingContext;\n\nlet program: WebGLProgram;\n\nlet aPositions: number;\nlet positions: WebGLBuffer;\n\nlet uTranslation: WebGLUniformLocation;\nlet translation = [0, 0];\n\nlet uResolution: WebGLUniformLocation;\nlet resolution = [0, 0];\n\nlet uPointSize: WebGLUniformLocation;\nlet pointSize = 0;\n\nfunction setUniforms(w: number, h: number): void {\n  translation = [w / 2, h / 2];\n  resolution = [w, h];\n  pointSize = round(w / 150);\n\n  gl.viewport(0, 0, w, h);\n}\n\nconst width = 900;\nconst steps = width / 30;\nconst step = width / steps;\nconst toComponents = (components: number[], v: Vec2) => [...components, ...v];\n\nconst travellers: WaveFunction[] = [];\nlet travellerComponents: number[] = [];\n\nconst points = [cosWave, sawWave, sinWave, triWave].reduce(\n  (components: number[], wave, i) => {\n    const oX = i % 2 ? step : -(width + step);\n    const oY = i < 2 ? width / 2 : -(width / 2);\n\n    const fX = sawWave(1, oX, oX + width, 0);\n    const fY = wave(1, oY - width / 3, oY + width / 3, 0);\n\n    const toVectors = (_: number, j: number) =>\n      vec2(fX(j / steps), fY(j / steps));\n\n    travellers.push(sawWave(2000, oX, oX + width, 0));\n    travellers.push(wave(2000, oY - width / 3, oY + width / 3, 0));\n    travellers.push(wave(2000, oX, oX + width, 0));\n    travellers.push(() => oY - width / 2 + step * 2);\n\n    return [\n      ...components,\n      ...new Array(steps)\n        .fill(0)\n        .map(toVectors)\n        .reduce(toComponents, []),\n    ];\n  },\n  [],\n);\n\nfunction init(): void {\n  if (shouldResize()) {\n    resize(c, m);\n    setUniforms(c.width, c.height);\n  }\n\n  gl.clearColor(0, 0, 0, 1);\n\n  program = link(\n    gl,\n    compile(gl, gl.VERTEX_SHADER, vert),\n    compile(gl, gl.FRAGMENT_SHADER, frag),\n  );\n\n  aPositions = gl.getAttribLocation(program, 'aPositions');\n  positions = gl.createBuffer() as WebGLBuffer;\n\n  uTranslation = gl.getUniformLocation(\n    program,\n    'uTranslation',\n  ) as WebGLUniformLocation;\n\n  uResolution = gl.getUniformLocation(\n    program,\n    'uResolution',\n  ) as WebGLUniformLocation;\n\n  uPointSize = gl.getUniformLocation(\n    program,\n    'uPointSize',\n  ) as WebGLUniformLocation;\n}\n\nfunction update(t: number /* , dt: number */): void {\n  travellerComponents = travellers.map(fn => fn(t));\n}\n\nfunction render(/* lag: number */): void {\n  if (shouldResize()) {\n    resize(c, m);\n    setUniforms(c.width, c.height);\n  }\n\n  const data = points.concat(travellerComponents);\n\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.useProgram(program);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, positions);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);\n\n  gl.enableVertexAttribArray(aPositions);\n  gl.bindBuffer(gl.ARRAY_BUFFER, positions);\n  gl.vertexAttribPointer(aPositions, 2, gl.FLOAT, false, 0, 0);\n\n  gl.uniform2fv(uTranslation, translation);\n  gl.uniform2fv(uResolution, resolution);\n  gl.uniform1f(uPointSize, pointSize);\n\n  gl.drawArrays(gl.POINTS, 0, data.length / 2);\n}\n\nconst { start } = loop(update, render);\n\ninit();\nstart();\n"]}