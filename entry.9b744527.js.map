{"version":3,"sources":["../lib/core/dom.ts","../lib/core/math.ts","11-rust-wasm/pkg/11_rust_wasm.js","11-rust-wasm/src/lib.rs","11-rust-wasm/src/entry.ts"],"names":["init","wasm","heap","Array","fill","undefined","push","stack_pointer","addBorrowedObject","obj","Error","draw","ctx","w","h","cachedTextDecoder","TextDecoder","cachegetUint8Memory","getUint8Memory","buffer","memory","Uint8Array","getStringFromWasm","ptr","len","decode","subarray","heap_next","length","addHeapObject","idx","getObject","dropObject","takeObject","ret","passStringToWasm","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeInto","arg","size","__wbindgen_malloc","offset","mem","code","charCodeAt","slice","__wbindgen_realloc","view","written","buf","encode","set","cachegetUint32Memory","getUint32Memory","Uint32Array","handleError","e","__wbindgen_exn_store","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","module","result","imports","wbg","__wbindgen_string_new","arg0","arg1","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","retptr","retlen","__wbg_error_4bb6c2a97407129a","varg0","__wbindgen_free","console","error","__widl_f_fill_CanvasRenderingContext2D","__widl_f_set_fill_style_CanvasRenderingContext2D","fillStyle","__widl_f_arc_CanvasRenderingContext2D","arg2","arg3","arg4","arg5","arc","__widl_f_fill_rect_CanvasRenderingContext2D","fillRect","__widl_f_log_1_","log","__wbindgen_debug_string","__wbindgen_throw","URL","Request","response","fetch","WebAssembly","instantiateStreaming","catch","warn","then","r","arrayBuffer","bytes","instantiate","Instance","instance","exports","__wbindgen_wasm_module","require"],"mappings":"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","file":"entry.9b744527.js","sourceRoot":"../src/lab","sourcesContent":["export const {\n  requestAnimationFrame: rAF,\n  cancelAnimationFrame: cAF,\n  devicePixelRatio: dpr,\n} = window;\n\nexport function el(selectors: string): Element | null {\n  return document.querySelector(selectors);\n}\n\ntype Listener<T extends Event> = (event: T) => void;\n\nexport function on<T extends Event>(type: string, listener: Listener<T>): void {\n  return window.addEventListener(type, listener as EventListener);\n}\n\nexport function off<T extends Event>(\n  type: string,\n  listener: Listener<T>,\n): void {\n  return window.removeEventListener(type, listener as EventListener);\n}\n","export const {\n  abs,\n  acos,\n  atan2,\n  ceil,\n  cos,\n  floor,\n  hypot,\n  max,\n  min,\n  PI: π,\n  pow,\n  round,\n  sin,\n  sqrt,\n} = Math;\nexport const ππ = π * 2;\nexport const { isFinite } = Number;\n\n/**\n * ## lerp\n * short for \"linear interpolate\" this function returns a number that is\n * interpolated between `a` and `b` by the ratio provided in `i` (e.g. if `i` is\n * 0 `a` is returned, if `i` is 1 `b` is returned)\n *\n * @export\n * @param {number} v0 the lower bound of the interpolation\n * @param {number} v1 the upper bound of the interpolation\n * @param {number} t the ratio by which to interpolate between `a` and `b`\n * @returns {number} a number that is interpolated between `a` and `b` by the\n * ratio provided in `i`\n */\nexport function lerp(v0: number, v1: number, t: number): number {\n  /**\n   * prefer precise method\n   * @see: https://github.com/mattdesl/lerp/blob/master/index.js\n   * @see: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\n   */\n  return (1 - t) * v0 + t * v1;\n}\n\n/**\n * ## saw\n * this is a trigonometric function (like Math.sin, or Math.cos), it takes an\n * angle in radians and returns a value between -1 and 1, the \"shape\" of the\n * returned values follows a linear \"sawtooth\" pattern\n *\n * @export\n * @param {number} radians a value in radians (clamped between 0 and ππ)\n * @returns {number} a value between -1 and 1 for entry values between 0 and ππ\n */\nexport function saw(radians: number): number {\n  return (radians % ππ) / π - 1;\n}\n\n/**\n * ## tri\n * this is a trigonometric function (like Math.sin, or Math.cos), it takes an\n * angle in radians and returns a value between -1 and 1, the \"shape\" of the\n * returned values follows a linear \"triangle wave\" pattern\n *\n * @export\n * @param {number} radians a value in radians (clamped between 0 and ππ)\n * @returns {number} a value between -1 and 1 for entry values between 0 and ππ\n */\nexport function tri(radians: number): number {\n  return 1 - 2 * abs(saw(radians));\n}\n\n/**\n * ## toDegrees\n * takes an angle in radians and returns that angle in degrees\n *\n * @param {number} radians an angle, in radians\n * @return {number} that same angle, in degrees\n */\nexport function toDegrees(radians: number): number {\n  return (radians * 180) / π;\n}\n\n/**\n * ## toRadians\n * takes an angle in degrees and returns that angle in radians\n *\n * @param {number} degrees an angle, in degrees\n * @return {number} that same angle, in radians\n */\nexport function toRadians(degrees: number): number {\n  return (degrees * π) / 180;\n}\n","\nlet wasm;\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* @param {any} ctx\n* @param {number} w\n* @param {number} h\n* @returns {void}\n*/\nexport function draw(ctx, w, h) {\n    try {\n        return wasm.draw(addBorrowedObject(ctx), w, h);\n\n    } finally {\n        heap[stack_pointer++] = undefined;\n\n    }\n\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction handleError(e) {\n    wasm.__wbindgen_exn_store(addHeapObject(e));\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction init(module) {\n    if (typeof module === 'undefined') {\n        throw new Error('the `module` argument is required for use with `parcel-plugin-wasm-pack`');\n    }\n    let result;\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n        return addHeapObject(varg0);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_59cb74e423758ede = function() {\n        return addHeapObject(new Error());\n    };\n    imports.wbg.__wbg_stack_558ba5917b466edd = function(ret, arg0) {\n\n        const retptr = passStringToWasm(getObject(arg0).stack);\n        const retlen = WASM_VECTOR_LEN;\n        const mem = getUint32Memory();\n        mem[ret / 4] = retptr;\n        mem[ret / 4 + 1] = retlen;\n\n    };\n    imports.wbg.__wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n\n        varg0 = varg0.slice();\n        wasm.__wbindgen_free(arg0, arg1 * 1);\n\n        console.error(varg0);\n    };\n    imports.wbg.__widl_f_fill_CanvasRenderingContext2D = function(arg0) {\n        getObject(arg0).fill();\n    };\n    imports.wbg.__widl_f_set_fill_style_CanvasRenderingContext2D = function(arg0, arg1) {\n        getObject(arg0).fillStyle = getObject(arg1);\n    };\n    imports.wbg.__widl_f_arc_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3, arg4, arg5) {\n        try {\n            getObject(arg0).arc(arg1, arg2, arg3, arg4, arg5);\n        } catch (e) {\n            handleError(e);\n        }\n    };\n    imports.wbg.__widl_f_fill_rect_CanvasRenderingContext2D = function(arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).fillRect(arg1, arg2, arg3, arg4);\n    };\n    imports.wbg.__widl_f_log_1_ = function(arg0) {\n        console.log(getObject(arg0));\n    };\n    imports.wbg.__wbindgen_debug_string = function(ret, arg0) {\n\n        const retptr = passStringToWasm(debugString(getObject(arg0)));\n        const retlen = WASM_VECTOR_LEN;\n        const mem = getUint32Memory();\n        mem[ret / 4] = retptr;\n        mem[ret / 4 + 1] = retlen;\n\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n        throw new Error(varg0);\n    };\n\n    if (module instanceof URL || typeof module === 'string' || module instanceof Request) {\n\n        const response = fetch(module);\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            result = WebAssembly.instantiateStreaming(response, imports)\n            .catch(e => {\n                console.warn(\"`WebAssembly.instantiateStreaming` failed. Assuming this is because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                return response\n                .then(r => r.arrayBuffer())\n                .then(bytes => WebAssembly.instantiate(bytes, imports));\n            });\n        } else {\n            result = response\n            .then(r => r.arrayBuffer())\n            .then(bytes => WebAssembly.instantiate(bytes, imports));\n        }\n    } else {\n\n        result = WebAssembly.instantiate(module, imports)\n        .then(result => {\n            if (result instanceof WebAssembly.Instance) {\n                return { instance: result, module };\n            } else {\n                return result;\n            }\n        });\n    }\n    return result.then(({instance, module}) => {\n        wasm = instance.exports;\n        init.__wbindgen_wasm_module = module;\n\n        return { draw };\n    });\n}\n\nexport default init;\n\n","import init from '../pkg/11_rust_wasm.js';\nmodule.exports = init(require('../pkg/11_rust_wasm_bg.wasm'));\n","import { el } from '../../../lib/core/dom';\nimport { max } from '../../../lib/core/math';\n\nimport { draw } from './lib.rs';\nimport './style.css';\n\nconst { devicePixelRatio: dpr } = window;\n\nconst c = el('canvas') as HTMLCanvasElement;\nconst w = 720;\nconst h = 480;\n\nc.width = w * dpr;\nc.height = h * dpr;\nc.style.transform = `scale(${max(w / c.width, h / c.height)})`;\n\nconst ctx = c.getContext('2d') as CanvasRenderingContext2D;\ndraw(ctx, c.width, c.height);\n"]}