{"version":3,"sources":["../lib/core/dom.ts","14-an-ecs/src/page.ts","14-an-ecs/src/events.ts","14-an-ecs/src/resizer.ts","14-an-ecs/src/input.ts","14-an-ecs/src/simulation.ts","14-an-ecs/src/entry.ts"],"names":[],"mappings":"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","file":"entry.0d438933.js","sourceRoot":"../src/lab","sourcesContent":["export const {\n  requestAnimationFrame: rAF,\n  cancelAnimationFrame: cAF,\n  devicePixelRatio: dpr,\n} = window;\n\nexport function el<T extends Element>(selectors: string): T {\n  const element = document.querySelector<T>(selectors);\n\n  if (!element) {\n    throw new Error(`Couldn't get \"${selectors}\" element`);\n  }\n\n  return element;\n}\n\ntype Listener<T extends Event> = (event: T) => void;\n\nexport function on<T extends Event>(type: string, listener: Listener<T>): void {\n  return window.addEventListener(type, listener as EventListener);\n}\n\nexport function off<T extends Event>(\n  type: string,\n  listener: Listener<T>,\n): void {\n  return window.removeEventListener(type, listener as EventListener);\n}\n","import { el } from '../../../lib/core/dom';\n\nexport const m = el('main') as HTMLElement;\nexport const c = el('canvas') as HTMLCanvasElement;\nexport const ctx = c.getContext('2d') as CanvasRenderingContext2D;\n","type Listener<K extends keyof HTMLElementEventMap> = (\n  event: HTMLElementEventMap[K],\n) => void;\n\nexport function attend<\n  T extends EventTarget,\n  U extends keyof HTMLElementEventMap\n>(\n  target: T,\n  forEvent: U,\n  listener: Listener<U>,\n  options: boolean | AddEventListenerOptions = false,\n) {\n  target.addEventListener(forEvent, listener as EventListener, options);\n}\n\nexport function ignore<\n  T extends EventTarget,\n  U extends keyof HTMLElementEventMap\n>(\n  target: T,\n  forEvent: U,\n  listener: Listener<U>,\n  options: boolean | AddEventListenerOptions = false,\n) {\n  target.removeEventListener(forEvent, listener as EventListener, options);\n}\n","import { attend } from './events';\n\ninterface ResizeableElement extends HTMLElement {\n  width: number;\n  height: number;\n}\n\nconst { max } = Math;\nconst { devicePixelRatio: dpr } = window;\n\nlet shouldResize = true;\n\nattend(window, 'resize', () => {\n  shouldResize = true;\n});\n\nfunction nearest(multipleOf = 1, startingAt = 0) {\n  return startingAt % multipleOf !== 0\n    ? startingAt + (multipleOf - (startingAt % multipleOf))\n    : startingAt;\n}\n\nfunction resize(container: HTMLElement, target: ResizeableElement, scale = 1) {\n  const { clientHeight: h, clientWidth: w } = container;\n\n  const width = nearest(scale, w);\n  const height = nearest(scale, h);\n\n  target.width = (width * dpr) / scale;\n  target.height = (height * dpr) / scale;\n\n  target.style.transform = `scale(${max(w / target.width, h / target.height)})`;\n\n  shouldResize = false;\n}\n\nexport const resizer = {\n  get shouldResize() {\n    return shouldResize;\n  },\n  resize,\n};\n","import { attend, ignore } from './events';\nimport { c } from './page';\n\nlet mouseX = c.width / 2;\nlet mouseY = c.height / 2;\nlet mouseDown = false;\n\nfunction onMouseMove({ clientX, clientY }: MouseEvent) {\n  mouseX = clientX;\n  mouseY = clientY;\n}\n\nnew MutationObserver(() => {\n  mouseX = c.width / 2;\n  mouseY = c.height / 2;\n}).observe(c, { attributes: true, attributeFilter: ['width', 'height'] });\n\nattend(c, 'mouseenter', ({ buttons }) => {\n  attend(c, 'mousemove', onMouseMove);\n  mouseDown = buttons !== 0;\n});\n\nattend(c, 'mouseleave', ({ buttons }) => {\n  ignore(c, 'mousemove', onMouseMove);\n  mouseX = c.width / 2;\n  mouseY = c.height / 2;\n  mouseDown = buttons !== 0;\n});\n\nattend(c, 'mousedown', ({ buttons }) => {\n  mouseDown = buttons !== 0;\n});\n\nattend(c, 'mouseup', ({ buttons }) => {\n  mouseDown = buttons !== 0;\n});\n\nexport const input = {\n  get mouseX() {\n    return mouseX;\n  },\n  get mouseY() {\n    return mouseY;\n  },\n  get mouseDown() {\n    return mouseDown;\n  },\n};\n","import { input } from './input';\n\nconst { floor, min, PI: π, pow, random, round, sqrt } = Math;\nconst ππ = π * 2;\n\n/**\n * here is my ecs implementation, it should solve some cases:\n *\n * 1. boids\n *    - a resource/shared component (center of mass?)\n *    - a position/velocity, updated by a system according to boid rules\n * 2. fireworks\n *    - active component\n *    - position/velocity\n *    - pooled/recycled when they go offscreen\n *\n * @see: https://gist.github.com/mysterycommand/c78c5dc6446dda940d49b36ee6529c45\n * @see: https://kyren.github.io/2018/09/14/rustconf-talk.html#back-to-the-beginning\n */\ninterface Vec2 {\n  x: number;\n  y: number;\n}\n\ntype Factory = () => [string, {}];\ntype Positions = Map<number, Vec2>;\ntype Rotations = Map<\n  number,\n  {\n    currentRotation: number;\n    currentRotationSpeed: number;\n    initialRotationSpeed: number;\n  }\n>;\n// type Velocities = Map<number, Vec2>;\n\nconst entities: number[] = [];\nconst components = new Map<string, Map<number, {}>>();\n\nconst size = 50;\nlet positions: Positions;\nlet rotations: Rotations;\n// let velocities: Velocities;\n\nfunction createEntity() {\n  const id = entities.length;\n  entities[id] = id;\n  return id;\n}\n\nfunction createEntities(count: number, factories: Factory[]) {\n  for (let i = 0; i < count; ++i) {\n    const id = createEntity();\n\n    factories.forEach((factory) => {\n      const [name, data] = factory();\n\n      const component = components.has(name)\n        ? (components.get(name) as Map<number, {}>)\n        : new Map<number, {}>();\n\n      component.set(id, data);\n      components.set(name, component);\n    });\n  }\n}\n\nconst maxRotationSpeed = 0.01;\n\n// deploy & recall\n// insert & remove\n// attach & detach\n// add & remove\n// create & destroy\n// produce & consume\n// make & break (or kill)\n// activate & deactivate\n// enable & disable\nexport function create(width: number, height: number) {\n  // reset entites here\n  const rows = floor(height / size);\n  const cols = floor(width / size);\n  let j = -1;\n\n  const positionFactory: Factory = () => {\n    ++j;\n    const v = (height - rows * size) / 2;\n    const h = (width - cols * size) / 2;\n\n    return [\n      'position',\n      {\n        x: h + (j % cols) * size + size / 2,\n        y: v + floor(j / cols) * size + size / 2,\n      },\n    ];\n  };\n\n  const rotationFactory: Factory = () => {\n    const r = round(random()) === 0 ? -maxRotationSpeed : maxRotationSpeed;\n\n    return [\n      'rotation',\n      {\n        currentRotation: 0,\n        currentRotationSpeed: r,\n        initialRotationSpeed: r,\n      },\n    ];\n  };\n\n  createEntities(rows * cols, [positionFactory, rotationFactory]);\n\n  positions = components.get('position') as Positions;\n  rotations = components.get('rotation') as Rotations;\n}\n\nexport function update(dt: DOMHighResTimeStamp) {\n  rotations.forEach(\n    (\n      { currentRotation, currentRotationSpeed, initialRotationSpeed },\n      key,\n      map,\n    ) => {\n      const { x: x0, y: y0 } = positions.get(key) as {\n        x: number;\n        y: number;\n      };\n      const { mouseDown, mouseX: x1, mouseY: y1 } = input;\n\n      const dist = sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2));\n      const r = mouseDown ? 300 : 100;\n      const d = 1 - min(dist, r) / (r * 2);\n      const speed = initialRotationSpeed * d;\n\n      map.set(key, {\n        currentRotation: (currentRotation + currentRotationSpeed * dt) % ππ,\n        currentRotationSpeed: d > 0.5 ? speed : currentRotationSpeed * 0.99,\n        initialRotationSpeed,\n      });\n    },\n  );\n}\n\nexport function render(ctx: CanvasRenderingContext2D) {\n  ctx.beginPath();\n\n  positions.forEach(({ x, y }, key) => {\n    ctx.save();\n\n    ctx.translate(x, y);\n    ctx.rotate(\n      (rotations.get(key) as {\n        currentRotation: number;\n        currentRotationSpeed: number;\n      }).currentRotation,\n    );\n\n    ctx.moveTo(-size / 4, 0);\n    ctx.lineTo(size / 4, 0);\n\n    ctx.restore();\n  });\n\n  ctx.stroke();\n}\n\nexport function remove() {\n  entities.splice(0);\n  components.set('position', new Map());\n  components.set('rotation', new Map());\n}\n","import { rAF } from '../../../lib/core/dom';\nimport { c, ctx, m } from './page';\nimport { resizer } from './resizer';\nimport { create, update, render, remove } from './simulation';\n\nimport './style.css';\n\nconst { max, random, round } = Math;\nconst hsl = (h = round(random() * 360), s = 60, l = 40) =>\n  `hsl(${h}, ${s}%, ${l}%)`;\n\nconst scale = 2;\n\nlet ft = 0; // first time\nlet pt = 0; // previous time\n\nlet ct: DOMHighResTimeStamp; // current time\nlet dt: DOMHighResTimeStamp; // delta time\n\nlet ot = 0; // over time\nconst it = 1_000 / 60; // ideal time\n\nconst hue = round(random() * 360);\nlet fillGradient: CanvasGradient;\nlet strokeGradient: CanvasGradient;\n\nrAF(function step(ts: DOMHighResTimeStamp) {\n  rAF(step);\n\n  ft || (ft = ts); // tslint:disable-line no-unused-expression\n  ct = ts - ft;\n  dt = ct - pt;\n  ot += dt;\n  pt = ct;\n\n  if (resizer.shouldResize) {\n    resizer.resize(m, c, scale);\n\n    const { width: w, height: h } = c;\n    const hw = w / 2;\n    const hh = h / 2;\n\n    fillGradient = ctx.createRadialGradient(hw, hh, 0, hw, hh, max(hw, hh));\n    fillGradient.addColorStop(0, hsl(hue));\n    fillGradient.addColorStop(1, hsl((hue + 30) % 360));\n    ctx.fillStyle = fillGradient;\n\n    strokeGradient = ctx.createRadialGradient(hw, hh, 0, hw, hh, max(hw, hh));\n    strokeGradient.addColorStop(0, hsl((hue + 180) % 360));\n    strokeGradient.addColorStop(1, hsl((hue + 210) % 360));\n    ctx.strokeStyle = strokeGradient;\n    ctx.lineWidth = 5;\n\n    ctx.fillRect(0, 0, w, h);\n\n    remove();\n    create(w, h);\n  }\n\n  while (ot >= it) {\n    update(it);\n    ot -= it;\n  }\n\n  ctx.fillRect(0, 0, c.width, c.height);\n  render(ctx /* , ot / it */);\n});\n"]}